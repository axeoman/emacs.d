Just some quick notes.

* Buffers.
C-x b - switch to buffer of create new buffer
**  Regular fill text:
lorem-ipsum https://github.com/jschaf/emacs-lorem-ipsum
 C-c l p - lorem-ipsum-insert-paragraphs
 C-c l s - lorem-ipsum-insert-sentences
 C-c l l - lorem-ipsum-insert-list

* org-mode
** org babel
;; <s TAB  - create code block
;; C-c C-c - Run code block
;; C-c '   - Edit code block
#+BEGIN_SRC emacs-lisp
  (defun add-3 (num)
    (+ 4 num))

  (add-3 4)

#+END_SRC

Compiling org file
#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "somefile.org"))
#+END_SRC

* Macros
- <F3> or C-x (  - Start macro
- <F4> or C-x )  - end macro
- <F4> or C-x e  - execute macro
- C-u num C-x e  - execute macro `num` times
- C-x C-k n      - name macro
- name-last-kbd-macro
- insert-kbd-macro
* Midge
- C-c C-j n from a source buffer or REPL to run all tests related to the namespace where you are currently in
- C-c C-j r can be used to re-run tests that didn't pass in the last execution
- C-c C-j t to run the test at point.
- C-u C-c C-j n from any Clojure source file or from the REPL and Emidje will display a list of known test namespaces in the current project
- C-c C-j p to run all tests defined in the project.
- C-u C-c C-j p and Emidje will show you a list of known test paths for the current project

-- Reports
- e Show test error and stacktrace
- RET or M-. Jump to namespace or test definition at point
- n-r Move point to next test result
- p-r Move point to previous test result
- n-e Move point to next error
- p-e Move point to previous error
- n-f Move point to next failure
- p-f Move point to previous failure
* Haskell editing
  Feature	                Command	         Keybinding
  Flycheck type checking	flycheck-mode
  Company completion	company-mode
  Type of selection	    dante-type-at	        C-c .
  Info at point	        dante-info	            C-c ,
  Apply Ghc suggestion
  for error at point	attrap-attrap	        C-c /
  Goto definition	    xref-find-definitions	M-.
  Find uses	            xref-find-references	M-?
  REPLoid (∗)	        dante-eval-block	    C-c ”
  Restart	            dante-restart
  Diagnosis	            dante-diagnose

(∗) REPLoid
You can evaluate code by writing it in a comment of the form `-- >>>` and run dante-eval-block.

Example:

example :: [String]
example = ["This is an example", "of", "interactive", "evaluation"]

-- >>> intercalate " " example
In the above file, if you invoke dante-eval-block on the line containing “intercalate”, you’ll get:

-- >>> intercalate " " example
-- "This is an example of interactive evaluation"
--
Several commands in the same block will be executed in at once, so you can have local let statements.

-- >>> let foo = "foo"
--
-- >>> foo ++ "bar"
-- "foobar"
---
Any GHCi command can be put in such a block, but note however that:

There is no guarantee that state will be maintained across several calls to dante-eval-block. In fact, Dante liberally calls :r and :l, and (re)sets various GHCi options.
It is not supported to load and/or unload modules in such blocks, or set unexpected options. This may work, or may mess with Dante internals.
So if your goal is run your webserver/database/etc. within GHCi, you should not do it using dante
* Clojure editing
** jacking in
C-c M-j  - start new Clojure REPL

** compiling
C-c C-k - compile file

** testing
C-c C-t n - run tests for namespace


